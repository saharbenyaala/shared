#! /usr/bin/python
#---------------------------------------------------------------------------
# Cedric Adjih - Inria - 2014-2015
#---------------------------------------------------------------------------

import pprint, os, sys, warnings
import matplotlib.pyplot as plt
import argparse
import numpy as np

try: from mpl_toolkits.mplot3d import Axes3D
except: warnings.warn("cannot import matplotlib Axes3D, no 'plot3d'")

sys.path.extend(["..", ".","../..", "../../../iot-lab/parts/cli-tools"])
import IotlabHelper
from IotlabHelper import extractNodeId, extractNodeName

#---------------------------------------------------------------------------

def getSiteInfo(site, noCache):
    iotlab = IotlabHelper.IotlabHelper()

    CacheName = "node-list-%s-cache.txt" % site
    if not os.path.exists(CacheName) or noCache:
        siteInfo = iotlab.getResources(site)
        with open(CacheName, "w") as f:
            f.write(repr(siteInfo))
    else:
        with open(CacheName) as f:
            siteInfo = eval(f.read())
    return siteInfo

def getNodeInfo(site, noCache, arch):
    siteInfo = getSiteInfo(site, noCache)
    nodePosList = [(extractNodeId(info["network_address"]), 
                    (float(info["x"]), float(info["y"]), float(info["z"])))
                   for info in siteInfo
                   if info["archi"] == arch
                   and info["mobile"] == 0
                   and info["state"] in ("Alive", "Busy")]
    return nodePosList

#---------------------------------------------------------------------------

def filterNodeList(site, filterName, nodePosList):
    if filterName == None:
        selected = [nodeId for nodeId,p in  nodePosList]
        if site == "rocquencourt":
            selected = set([ nodeId for nodeId,(x,y,z) in nodePosList ])
                             #if 61 <= nodeId <= 128]) # ZZZ XXX!!!
                             #if 61 <= nodeId <= 100]) # ZZZ XXX!!!
                             #if (nodeId <= 100) or (129 <= nodeId <= 158)])
    elif site == "grenoble" and filterName == "square":
        selected = set([ nodeId for nodeId,(x,y,z) in nodePosList
                         if z < 0 and x < 20])
    elif site == "grenoble" and filterName == "modulo":
        selected = set([ nodeId for nodeId,(x,y,z) in nodePosList
                         if nodeId % 3 == 0])
    else: raise RuntimeError("Unknown node filtering", (site, filterName))
    result = [ (nodeId,p) for nodeId,p in nodePosList if nodeId in selected ]
    return result

def getExcludeList(args):
    excludeStr = args.exclude.replace(",", " ").replace(";", " ")
    excludeStrList = excludeStr.split(" ")
    result = [ int(x) for x in excludeStrList if x != "" ]
    return result

def getSelectedNodeList(args):
    nodePosList = getNodeInfo(args.site, args.no_cache, args.arch)
    tmpNodePosList = filterNodeList(args.site, args.filter, nodePosList)
    excludedNodeSet = set(getExcludeList(args))
    finalNodePosList = [ info for info in tmpNodePosList
                        if info[0] not in excludedNodeSet ]
    return finalNodePosList

#---------------------------------------------------------------------------

def cmdPlot(args):
    nodePosList = getSelectedNodeList(args)
    xList = [ x for nodeId,(x,y,z) in nodePosList]
    yList = [ y for nodeId,(x,y,z) in nodePosList]
    zList = [ z for nodeId,(x,y,z) in nodePosList]
    plt.plot(xList, yList, "*")
    plt.show()

#..................................................
# from: http://stackoverflow.com/questions/8130823/set-matplotlib-3d-plot-aspect-ratio

def axisEqual3D(ax):
    extents = np.array([getattr(ax, 'get_{}lim'.format(dim))() for dim in 'xyz'])
    sz = extents[:,1] - extents[:,0]
    centers = np.mean(extents, axis=1)
    maxsize = max(abs(sz))
    r = maxsize/2
    for ctr, dim in zip(centers, 'xyz'):
        getattr(ax, 'set_{}lim'.format(dim))(ctr - r, ctr + r)

#..................................................

def cmdPlot3d(args):
    nodePosList = getSelectedNodeList(args)
    xList = [ x for nodeId,(x,y,z) in nodePosList]
    yList = [ y for nodeId,(x,y,z) in nodePosList]
    zList = [ z for nodeId,(x,y,z) in nodePosList]
    fig = plt.figure()
    ax = fig.add_subplot(111, projection='3d')
    ax.scatter(xList, yList, zList, marker="o")
    axisEqual3D(ax)
    plt.show()

def cmdReserve(args):
    arch = args.arch
    nodePosList = getSelectedNodeList(args)
    nodeIdSet = set([ nodeId for nodeId,p in nodePosList ])
    #nodeList = getSiteInfo(args.site, args.no_cache)
    #nodeNameList = [extractNodeName(info["network_address"]) 
    #                for info in nodeList
    #                if info["archi"] == args.arch 
    #                and extractNodeId(info["network_address"]) in nodeIdSet]
    shortArch = arch.split(":")[0]
    cmd = "experiment-cli submit -l %s,%s,%s" % (
        args.site, shortArch, "+".join(sorted(list(["%s"%x for x in nodeIdSet]))))
    print (cmd)
    #pprint.pprint(nodeList)

def cmdList(args):
    nodePosList = getSelectedNodeList(args)
    nodeIdList = [ nodeId for nodeId,p in nodePosList ]
    nodeIdList.sort()
    print (nodeIdList)

SerialTcpPort = 20000
BaseTcpPort = 20000

def cmdSshForward(args):
    baseArch = args.arch.split(":")[0]
    nodePosList = getSelectedNodeList(args)
    nodeIdList = [ nodeId for nodeId,p in nodePosList ]
    nodeIdList.sort()
    redirectList = []
    for nodeId in nodeIdList:
        node = "node-%s-%s" % (baseArch, nodeId)
        redirectList.extend(
            ["-L %s:%s:%s" % (BaseTcpPort+nodeId, node, SerialTcpPort)])
    sshRedirectPortStr = " ".join(redirectList)
    cmd = "echo FORWARDING PORTS \(through ssh, for use by other programs\)...; sleep 600000"
    sshSnifferTunnelCommand = "ssh -T %s %s '%s'" % (
        args.site+".iot-lab.info", sshRedirectPortStr, cmd)
    processManager = IotlabHelper.ProcessManager()
    processManager.startSubProcessInTerm("id-based ssh tunnels to IoT-LAB", 
                                         sshSnifferTunnelCommand)

def cmdMux(args):
    baseArch = args.arch.split(":")[0]
    nodePosList = getSelectedNodeList(args)
    nodeIdList = [ nodeId for nodeId,p in nodePosList ]
    nodeIdList.sort()
    nodeInfoList = ["localhost:%s:%s-%s" 
                    % (BaseTcpPort+nodeId, baseArch, nodeId)
                    for nodeId in nodeIdList]
    muxCommand = "cd ../.. && ./ConnectionTool.py connect --mux --mux-port 19999 --input line --output line --with-close --nodes " + " ".join(nodeInfoList)
    
    #os.system(muxCommand)
    processManager = IotlabHelper.ProcessManager()
    processManager.startSubProcessInTerm(
        "mux tunnels to IoT-LAB", muxCommand)

#---------------------------------------------------------------------------

def runAsCommand():
    DefaultSiteName = "grenoble"
    DefaultArch = "m3:at86rf231"
    DefaultMuxPort = 19999

    parser = argparse.ArgumentParser()
    parser.add_argument("--site", type=str, default=DefaultSiteName)
    parser.add_argument("--filter", type=str, default=None)
    parser.add_argument("--exclude", type=str, default="")
    parser.add_argument("--no-cache", action="store_true", default=False)
    parser.add_argument("--arch", type=str, default=DefaultArch)

    subparsers = parser.add_subparsers(dest="command")
    plotParser = subparsers.add_parser("plot")
    plot3dParser = subparsers.add_parser("plot3d")
    reserveParser = subparsers.add_parser("reserve")
    listParser = subparsers.add_parser("list")
    sshForwardParser = subparsers.add_parser("ssh-forward")
    muxParser = subparsers.add_parser("mux")
    #muxParser.add_argument("--mux-port", type=int, DefaultMuxPort)
    #showParser = subparsers.add_parser("show")

    args = parser.parse_args()
    if args.command == "plot":
        cmdPlot(args)    
    elif args.command == "plot3d":
        cmdPlot3d(args)    
    elif args.command == "show":
        cmdShow(args)
    elif args.command == "list":
        cmdList(args)
    elif args.command == "ssh-forward":
        cmdSshForward(args)
    elif args.command == "mux":
        cmdMux(args)
    elif args.command == "reserve":
        cmdReserve(args)
    else: raise RuntimeError("Unexpected command", args.command)

#---------------------------------------------------------------------------

if __name__ == "__main__":
    runAsCommand()

#---------------------------------------------------------------------------
